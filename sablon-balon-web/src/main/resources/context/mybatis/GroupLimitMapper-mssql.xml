<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<mapper namespace="com.jakarta.software.web.mapper.GroupLimitMapper">
    
    
    
    <select id="findAllGroupLimit" resultType="GroupLimitHeader">
        SELECT <include refid="_sqlGroupLimit"/>
        FROM group_limit_header glh     
    </select>
    
	
	<select id="findListGroupLimitHeaderByParam" resultType="GroupLimitHeader" parameterType="GroupLimitParamVO">
	    select * from (
			select ROW_NUMBER() OVER (ORDER BY ${sortVariable} ${sortOrder}) AS ROWNUM,
				<include refid="_sqlGroupLimit" />,
				ud1.user_name as createdByDisplay,
				ud2.user_name as updatedByDisplay
			from group_limit_header glh
				left join user_data ud1 on ud1.id = glh.created_by
				left join user_data ud2 on ud2.id = glh.updated_by
			<include refid="_sqlSelectionGroupLimitHeader" /> 
			) AS ROWPAGING
		WHERE ROWNUM BETWEEN #{rowStart} and #{rowEnd}
	</select>
	
	<select id="countListGroupLimitHeaderByParam" resultType="java.lang.Integer" parameterType="GroupLimitParamVO">
	    select count(1)
		from group_limit_header glh
			left join user_data ud1 on ud1.id = glh.created_by
			left join user_data ud2 on ud2.id = glh.updated_by
		<include refid="_sqlSelectionGroupLimitHeader" /> 
	</select>
	
	<sql id="_sqlSelectionGroupLimitHeader">
		<where>
			<if test="groupName!=null and groupName.length() > 0">
				AND glh.group_name  '%' + #{groupName} + '%' 				
			</if>
		</where>
	</sql>
	
	<select id="findListGroupLimitDetailByHeaderId" resultType="GroupLimitDetail" parameterType="java.lang.Integer">
  		select gld.id as id, gld.group_limit_id as groupLimitId, gld.trx_code as trxCode,
			gld.limit_per_trx as limitPerTrx, gld.limit_per_day as limitPerDay, gld.created_on as createdOn,
			gld.created_by as createdBy, gld.updated_on as updatedOn,
			gld.updated_by as updatedBy, gld.fee_trx as feeTrx,
			ld.lookup_desc as trxCodeDisplay
		from group_limit_detail gld
			left join lookup_data ld on ld.lookup_cat = 12 and ld.lookup_value=gld.trx_code 
		where gld.group_limit_id=#{value}
	</select>
	
	<select id="findGroupLimitHeaderById" resultType="GroupLimitHeader" parameterType="java.lang.Integer">
  		select <include refid="_sqlGroupLimit" />
		from group_limit_header glh
		where glh.id=#{value}
	</select>
	
	<select id="findGroupLimitDetailById" resultType="GroupLimitDetail" parameterType="java.lang.Integer">
  		select gld.id as id, gld.group_limit_id as groupLimitId, gld.trx_code as trxCode,
			gld.limit_per_trx as limitPerTrx, gld.limit_per_day as limitPerDay, gld.created_on as createdOn,
			gld.created_by as createdBy, gld.updated_on as updatedOn ,
			gld.updated_by as updatedBy, gld.fee_trx as feeTrx,
			ld.lookup_desc as trxCodeDisplay
		from group_limit_detail gld
			left join lookup_data ld on ld.lookup_cat = 12 and ld.lookup_value=gld.trx_code 
		where gld.id=#{value}
	</select>
	
	<select id="findDuplicateTrxCode" resultType="java.lang.Integer" parameterType="java.util.Map">
  		select count(1)
		from group_limit_detail gld
		where gld.group_limit_id=#{groupLimitId} and gld.trx_code=#{trxCode}
	</select>
	
	<select id="findDuplicateName" resultType="java.lang.Integer" parameterType="java.lang.String">
  		select count(1)
		from group_limit_header glh
		where upper(glh.group_name)=#{value}
	</select>
	
</mapper>