<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<mapper namespace="com.jakarta.software.web.mapper.UserLevelMapper">
    
    <insert id="insertUserLevelMenu" parameterType="UserLevelMenu">
    	insert into user_level_menu(menu_id, level_id)
    	values(
    		#{menuId, javaType=Integer, jdbcType=NUMERIC}, 
    		#{levelId, javaType=Integer, jdbcType=NUMERIC})
    </insert>

	<insert id="createUserLevelData" parameterType="UserLevel">
    	insert into user_level(
    		level_name, 
    		level_desc,
    		created_by, 
    		created_on, 
    		updated_by, 
    		updated_on) 
    	values(
    		#{levelName, javaType=String, jdbcType=VARCHAR}, 
    		#{levelDesc, javaType=String, jdbcType=VARCHAR}, 
    		#{createdBy, javaType=Integer, jdbcType=NUMERIC}, 
    		#{createdOn, javaType=java.util.Date, jdbcType=TIMESTAMP}, 
    		#{updatedBy, javaType=Integer, jdbcType=NUMERIC}, 
    		#{updatedOn, javaType=java.util.Date, jdbcType=TIMESTAMP}
    	)
    	<selectKey resultType="java.lang.Integer" keyProperty="id">
			SELECT user_level_seq.CURRVAL FROM dual
		</selectKey>
    </insert>
    
    <sql id="_sqlFindLevel">
    	<where>
			<if test="levelName != null and levelName.length() > 0">
				AND l.level_name like concat('%', concat(#{levelName}, '%'))
			</if>
		</where>
    </sql>
    
    <select id="findListUserLevelByParam" resultType="UserLevel" parameterType="UserLevelParamVO">
		SELECT * FROM(
			SELECT  q.*, rownum as seqNo 
			FROM(
				select l.id as id, l.level_name as levelName, l.level_desc as levelDesc
				from user_level l
  				<include refid="_sqlFindLevel" />
				ORDER BY ${sortVariable} ${sortOrder}
			) q
		WHERE  rownum &lt;= #{rowEnd})
		WHERE seqNo >= #{rowStart}
    </select>
	
	<select id="countUserLevelByParam" resultType="java.lang.Integer" parameterType="UserLevelParamVO">
        select count(l.level_name) as levelName
  		from user_level l 
  		<include refid="_sqlFindLevel" />
    </select>
    
</mapper>
