<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<mapper namespace="com.jakarta.software.web.mapper.PasswordMapper">
    
	<update id="updatePassHistory" parameterType="PasswordHistory">
    	update user_password_history set 
			old_password1 = #{passHistory1,javaType=java.lang.String,jdbcType=VARCHAR},
			old_password2 = #{passHistory2,javaType=java.lang.String,jdbcType=VARCHAR},
			old_password3 = #{passHistory3,javaType=java.lang.String,jdbcType=VARCHAR},
			old_password4 = #{passHistory4,javaType=java.lang.String,jdbcType=VARCHAR},
			old_password5 = #{passHistory5,javaType=java.lang.String,jdbcType=VARCHAR},
			old_password6 = #{passHistory6,javaType=java.lang.String,jdbcType=VARCHAR}
        where user_id = #{userId}
    </update>
    
    <select id="findPassHistoryByUserId" resultType="PasswordHistory" parameterType="java.lang.Integer">
        select rtrim(user_id) as userId,
		rtrim(old_password1) as passHistory1,
		rtrim(old_password2) as passHistory2,
		rtrim(old_password3) as passHistory3,
		rtrim(old_password4) as passHistory4,
		rtrim(old_password5) as passHistory5,
		rtrim(old_password6) as passHistory6
        from user_password_history
        where user_id = #{value} 
    </select>
    
    <sql id="_sqlResetPasswordUserData">
    	ud.id as id,
		ud.user_code as userCode,
		ud.user_name as userName,
		ud.password as userPassword,
		ud.invalid_count as invalidCount,
		ud.user_status as userStatus,
		ud.branch_id as branchId,
		ud.department as department,
		ud.level_id as levelId,
		ud.last_login_on as lastLoginOn,
		ud.pass_changed_on as passChangedOn,
		ud.session_id as sessionId,
		ud.created_on as createdOn,
		ud.created_by as createdBy,
		ud.updated_on as updatedOn,
		ud.updated_by as updatedBy,
		ud.auth_status as authStatus,
		ud.auth_on as authOn,
		ud.auth_by as authBy,
		l.lookup_desc as userStatusDisplay,
		ul.level_name as userLevelDisplay,
		bd.branch_name as branchDisplay,
		ud1.user_name as createdByDisplay,
		ud2.user_name as updatedByDisplay		
    </sql>
    
    <update id="resetPassword" parameterType="UserData">
		update user_data
		set	updated_by = #{updatedBy},
			updated_on = #{updatedOn},
			need_change_pass = #{needChangePass},
			invalid_count=#{invalidCount},
			password = #{userPassword}
		where id=#{id} 
    </update>
    
    <update id="changePassword" parameterType="UserData">
		update user_data
		set	updated_by = #{updatedBy},
			updated_on = #{updatedOn},
			need_change_pass = #{needChangePass},
			password = #{userPassword}
		where id=#{id} 
    </update>
    
</mapper>